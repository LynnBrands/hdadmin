-- MISdb - IT management database
-- controls code generated by Win32Lib IDE v0.18.23r
--
-- Author: Michael J. Sabal for Notations, Inc.
--------------------------------------------------------------------------------
-- VERSION HISTORY
--------------------------------------------------------------------------------
-- 18 Aug 2005 - v0.01a - Create UI with Judith's IDE
--  6 Sep 2005 - v0.02a - Connect with odbc
-- 16 Nov 2005 - v0.02b - onClick_SaveButton()
-- 18 Nov 2005 - v0.02c - onClick_BrowseButton()
--  5 Dec 2005 - v0.02d - save Edits
-- 27 Dec 2005 - v0.02e - onClick_DeleteButton()
-- 27 Dec 2005 - v0.02f - showPassword
--  3 Jan 2006 - v0.03a - bug fixes
-- 15 May 2006 - v0.03b - issue 005: saving new asset doesn't work
--                      - issue 004: search asset by location returns error
--                      - issue 006: saving a browsed asset changes the HD size on screen but not in db
--                      - issue 003: terminated flag on Users tab always saves as N
-- 15 May 2006 - v0.04a - issue 511: add department display to assets tab
--                      - issue 512: add department lookup to assets tab
--                      - issue 513: add comments to assets table
--                      - issue 515: add wizard to add a bunch of new machines / licenses at once
-- 18 May 2006 - v0.04b - issue 508: add ability to wildcard search
--                      - issue 509: allow searching for empty fields
-- 22 May 2006 - v0.04c - issue 503: activate menus
--                      - issue 514: on tab-off of userid (in assets) or assetid (in licenses), show description
-- 24 May 2006 - v0.04d - issue 507:
--------------------------------------------------------------------------------
-- TO DO
--------------------------------------------------------------------------------
-- 501: add ability to delete drops
-- 502: add ability to mass add licenses
-- 504: add reports
-- 505: add functionality to the undo button
-- 506: create documentation
-- 507: add zoom screens
-- 510: export to csv (Office & listdb formats)
-- 516: add spreadsheet view for search results
--------------------------------------------------------------------------------
without warning

--------------------------------------------------------------------------------
-- INCLUDES
--------------------------------------------------------------------------------
include Win32Lib.ew as win32lib
include Odbc.ew as odbc

--------------------------------------------------------------------------------
-- CONSTANTS
--------------------------------------------------------------------------------
constant MODE_NULL = 0
constant MODE_NEW = 1
constant MODE_SEARCH = 2
constant MODE_BROWSE = 3

constant ON_USER = 1
constant ON_ASSET = 2
constant ON_LICENSE = 3
constant ON_DROP = 4

--------------------------------------------------------------------------------
--  Window MISdb
--------------------------------------------------------------------------------
sequence IDEFlags
IDEFlags = classDefaults(Window, { {1, {WS_SYSMENU}},{2, {WS_EX_DLGMODALFRAME}} } )
constant MISdb = createEx( Window, "MISdb", 0, Default, Default, 640, 480, {WS_THICKFRAME, WS_SYSMENU, WS_MINIMIZEBOX, WS_MAXIMIZEBOX}, {WS_EX_DLGMODALFRAME} )
constant FileMenu = createEx( Menu, "&File", MISdb, 0, 0, 0, 0, 0, 0 )
constant FilePrintSetup = createEx( MenuItem, "Print &Setup", FileMenu, 0, 0, 0, 0, 0, 0 )
constant FileExit = createEx( MenuItem, "E&xit", FileMenu, 0, 0, 0, 0, 0, 0 )
constant TableMenu = createEx( Menu, "&Table", MISdb, 0, 0, 0, 0, 0, 0 )
constant TableUser = createEx( MenuItem, "&User", TableMenu, 0, 0, 0, 0, 0, 0 )
constant TableAsset = createEx( MenuItem, "&Asset", TableMenu, 0, 0, 0, 0, 0, 0 )
constant TableLicense = createEx( MenuItem, "&License", TableMenu, 0, 0, 0, 0, 0, 0 )
constant TableDrop = createEx( MenuItem, "&Drop", TableMenu, 0, 0, 0, 0, 0, 0 )
constant ActionMenu = createEx( Menu, "&Action", MISdb, 0, 0, 0, 0, 0, 0 )
constant ActionNew = createEx( MenuItem, "&New", ActionMenu, 0, 0, 0, 0, 0, 0 )
constant ActionSearch = createEx( MenuItem, "&Search", ActionMenu, 0, 0, 0, 0, 0, 0 )
constant HelpMenu = createEx( Menu, "&Help", MISdb, 0, 0, 0, 0, 0, 0 )
constant HelpAbout = createEx( MenuItem, "&About", HelpMenu, 0, 0, 0, 0, 0, 0 )
setCheck(TableAsset,w32True)
constant ToolBar2 = createEx( ToolBar, "ToolBar2", MISdb, 0, 0, 640, 34, 0, 0 )
constant FirstButton = createEx( PictureButton, "First", ToolBar2, 0, 0, 30, 30, 0, 0 )
setBitmap( FirstButton,"Icons\\first.bmp")
constant PrevButton = createEx( PictureButton, "Prev", ToolBar2, 30, 0, 30, 30, 0, 0 )
setBitmap( PrevButton,"Icons\\prev.bmp")
constant NextButton = createEx( PictureButton, "Next", ToolBar2, 60, 0, 30, 30, 0, 0 )
setBitmap( NextButton,"Icons\\next.bmp")
constant LastButton = createEx( PictureButton, "Last", ToolBar2, 90, 0, 30, 30, 0, 0 )
setBitmap( LastButton,"Icons\\last.bmp")
constant NewButton = createEx( PictureButton, "New", ToolBar2, 136, 0, 30, 30, 0, 0 )
setBitmap( NewButton,"Icons\\new.bmp")
constant FindButton = createEx( PictureButton, "Find", ToolBar2, 166, 0, 30, 30, 0, 0 )
setBitmap( FindButton,"Icons\\find.bmp")
constant DeleteButton = createEx( PictureButton, "Delete", ToolBar2, 196, 0, 30, 30, 0, 0 )
setBitmap( DeleteButton,"Icons\\delete.bmp")
constant ReportButton = createEx( PictureButton, "Report", ToolBar2, 226, 0, 30, 30, 0, 0 )
setBitmap( ReportButton,"Icons\\report.bmp")
constant SaveButton = createEx( PictureButton, "Save", ToolBar2, 272, 0, 30, 30, 0, 0 )
setBitmap( SaveButton,"Icons\\save.bmp")
constant UndoButton = createEx( PictureButton, "Undo", ToolBar2, 302, 0, 30, 30, 0, 0 )
setBitmap( UndoButton,"Icons\\undo.bmp")
constant TabControl30 = createEx( TabControl, "TabControl30", MISdb, 0, 2, 640, 440, 0, 0 )
constant UserTab = createEx( TabItem, "User", TabControl30, 0, 0, 0, 0, 0, 0 )
constant UserIDEdit = createEx( EditText, "", UserTab, 64, 36, 132, 20, 0, 0 )
setEnable( UserIDEdit, w32False )
constant FirstNameEdit = createEx( EditText, "", UserTab, 64, 72, 150, 20, 0, 0 )
constant LastNameEdit = createEx( EditText, "", UserTab, 320, 72, 150, 20, 0, 0 )
constant UsernameEdit = createEx( EditText, "", UserTab, 64, 104, 150, 20, 0, 0 )
constant PasswordEdit = createEx( EditText, "", UserTab, 320, 104, 150, 20, 0, 0 )
setEnable( PasswordEdit, w32False )
constant ShowPWCheck = createEx( CheckBox, "Show Password", UserTab, 484, 104, 148, 20, 0, 0 )
constant LocationEdit = createEx( EditText, "", UserTab, 64, 136, 48, 20, 0, 0 )
constant DepartmentEdit = createEx( EditText, "", UserTab, 240, 136, 150, 20, 0, 0 )
constant TerminatedEdit = createEx( EditText, "", UserTab, 504, 136, 25, 20, 0, 0 )
constant ExtEdit = createEx( EditText, "", UserTab, 64, 168, 60, 20, 0, 0 )
constant UserNotesEdit = createEx( MleText, "", UserTab, 64, 200, 500, 148, 0, 0 )
constant LText45 = createEx( LText, "User ID", UserTab, 8, 36, 60, 20, 0, 0 )
constant LText46 = createEx( LText, "First Name", UserTab, 8, 72, 60, 20, 0, 0 )
constant LText47 = createEx( LText, "Last Name", UserTab, 256, 72, 60, 20, 0, 0 )
constant LText48 = createEx( LText, "Password", UserTab, 260, 104, 60, 20, 0, 0 )
constant LText49 = createEx( LText, "Location", UserTab, 8, 136, 60, 20, 0, 0 )
constant LText50 = createEx( LText, "Department", UserTab, 160, 136, 70, 20, 0, 0 )
constant LText51 = createEx( LText, "Terminated", UserTab, 428, 136, 70, 20, 0, 0 )
constant LText52 = createEx( LText, "Extension", UserTab, 8, 168, 60, 20, 0, 0 )
constant LText53 = createEx( LText, "Notes", UserTab, 8, 200, 60, 20, 0, 0 )
constant LText55 = createEx( LText, "Username", UserTab, 8, 104, 60, 20, 0, 0 )
constant AssetTab = createEx( TabItem, "Asset", TabControl30, 0, 0, 0, 0, 0, 0 )
constant LicenseTab = createEx( TabItem, "License", TabControl30, 0, 0, 0, 0, 0, 0 )
constant DropTab = createEx( TabItem, "Drop", TabControl30, 0, 0, 0, 0, 0, 0 )
constant AssetUserID = createEx( EditText, "", AssetTab, 292, 44, 152, 20, 0, 0 )
constant AssetType = createEx( EditText, "", AssetTab, 72, 88, 136, 20, 0, 0 )
constant AssetSN = createEx( EditText, "", AssetTab, 292, 88, 152, 20, 0, 0 )
constant AssetMfgr = createEx( EditText, "", AssetTab, 72, 136, 136, 20, 0, 0 )
constant AssetModel = createEx( EditText, "", AssetTab, 292, 136, 152, 20, 0, 0 )
constant AssetCPUType = createEx( EditText, "", AssetTab, 72, 180, 136, 20, 0, 0 )
constant AssetCPUSpeed = createEx( EditText, "", AssetTab, 292, 180, 152, 20, 0, 0 )
constant AssetMemoryType = createEx( EditText, "", AssetTab, 72, 224, 136, 20, 0, 0 )
constant AssetMemoryMB = createEx( EditText, "", AssetTab, 292, 224, 152, 20, 0, 0 )
constant AssetHDGB = createEx( EditText, "", AssetTab, 72, 268, 136, 20, 0, 0 )
constant AssetLocation = createEx( EditText, "", AssetTab, 292, 268, 152, 20, 0, 0 )
constant AssetUsername = createEx( EditText, "", AssetTab, 448, 44, 180, 20, 0, 0 )
setEnable( AssetUsername, w32False )
constant LText70 = createEx( LText, "Asset ID", AssetTab, 8, 44, 60, 20, 0, 0 )
constant AssetID = createEx( EditText, "", AssetTab, 72, 44, 136, 20, 0, 0 )
setEnable( AssetID, w32False )
constant AssetDepartment = createEx( EditText, "", AssetTab, 72, 312, 136, 20, 0, 0 )
setEnable( AssetDepartment, w32False )
constant AssetMultipleButton = createEx( PushButton, "Multiple", AssetTab, 448, 88, 180, 20, 0, 0 )
constant AssetNotes = createEx( MleText, "", AssetTab, 292, 312, 336, 75, 0, 0 )
constant LText71 = createEx( LText, "User ID", AssetTab, 216, 44, 70, 20, 0, 0 )
constant LText72 = createEx( LText, "Type", AssetTab, 8, 88, 60, 20, 0, 0 )
constant LText73 = createEx( LText, "Serial num.", AssetTab, 216, 88, 70, 20, 0, 0 )
constant LText74 = createEx( LText, "Mfgr", AssetTab, 8, 136, 60, 20, 0, 0 )
constant LText75 = createEx( LText, "Model", AssetTab, 216, 136, 70, 20, 0, 0 )
constant LText76 = createEx( LText, "CPU Type", AssetTab, 8, 180, 60, 20, 0, 0 )
constant LText77 = createEx( LText, "CPU Speed", AssetTab, 216, 180, 70, 20, 0, 0 )
constant LText78 = createEx( LText, "Mem. Type", AssetTab, 8, 224, 60, 20, 0, 0 )
constant LText79 = createEx( LText, "Mem. (MB)", AssetTab, 216, 224, 70, 20, 0, 0 )
constant LText80 = createEx( LText, "H.D.(GB)", AssetTab, 8, 268, 60, 20, 0, 0 )
constant LText81 = createEx( LText, "Location", AssetTab, 216, 268, 70, 20, 0, 0 )
constant LText120 = createEx( LText, "Department", AssetTab, 8, 312, 60, 20, 0, 0 )
constant LText121 = createEx( LText, "Notes", AssetTab, 216, 312, 70, 20, 0, 0 )
constant LicenseAsset = createEx( EditText, "", LicenseTab, 300, 48, 100, 20, 0, 0 )
constant LicenseKey = createEx( EditText, "", LicenseTab, 88, 84, 150, 20, 0, 0 )
constant LicenseSeq = createEx( EditText, "", LicenseTab, 336, 84, 50, 20, 0, 0 )
constant LicenseSWCompany = createEx( EditText, "", LicenseTab, 88, 120, 100, 20, 0, 0 )
constant LicenseSWTitle = createEx( EditText, "", LicenseTab, 300, 120, 220, 20, 0, 0 )
constant LicenseSWVersion = createEx( EditText, "", LicenseTab, 88, 156, 100, 20, 0, 0 )
constant LicenseDescrip = createEx( EditText, "", LicenseTab, 300, 156, 220, 20, 0, 0 )
constant LicenseMediaCabinet = createEx( EditText, "", LicenseTab, 88, 188, 100, 20, 0, 0 )
constant LicenseMediaFolder = createEx( EditText, "", LicenseTab, 300, 188, 100, 20, 0, 0 )
constant LicenseAssetDescrip = createEx( EditText, "", LicenseTab, 412, 48, 180, 20, 0, 0 )
setEnable( LicenseAssetDescrip, w32False )
constant LText93 = createEx( LText, "License ID", LicenseTab, 8, 48, 60, 20, 0, 0 )
constant LicenseID = createEx( EditText, "", LicenseTab, 88, 48, 100, 20, 0, 0 )
setEnable( LicenseID, w32False )
constant LText94 = createEx( LText, "Asset ID", LicenseTab, 212, 48, 60, 20, 0, 0 )
constant LText95 = createEx( LText, "License Key", LicenseTab, 8, 84, 75, 20, 0, 0 )
constant LText96 = createEx( LText, "Seq #", LicenseTab, 264, 84, 60, 20, 0, 0 )
constant LText97 = createEx( LText, "SW Company", LicenseTab, 8, 120, 75, 20, 0, 0 )
constant LText98 = createEx( LText, "SW Title", LicenseTab, 212, 120, 70, 20, 0, 0 )
constant LText99 = createEx( LText, "SW Version", LicenseTab, 8, 156, 75, 20, 0, 0 )
constant LText100 = createEx( LText, "Description", LicenseTab, 212, 156, 70, 20, 0, 0 )
constant LText101 = createEx( LText, "Media Cabinet", LicenseTab, 8, 188, 75, 20, 0, 0 )
constant LText102 = createEx( LText, "Media Folder", LicenseTab, 212, 188, 75, 20, 0, 0 )
constant LText103 = createEx( LText, "CREATE", LicenseTab, 152, 324, 60, 20, 0, 0 )
setTextColor( LText103,255)
setFont( LText103,"Arial",10,Normal+Bold)
constant LicenseMassCreate = createEx( EditText, "", LicenseTab, 212, 324, 48, 20, 0, 0 )
constant LText105 = createEx( LText, "RECORDS", LicenseTab, 264, 324, 75, 20, 0, 0 )
setTextColor( LText105,255)
setFont( LText105,"Arial",10,Normal+Bold)
constant LicenseMassCreateButton = createEx( PushButton, "GO!", LicenseTab, 336, 320, 88, 28, 0, 0 )
setFont( LicenseMassCreateButton,"Arial",10,Normal+Bold)
constant DropUserID = createEx( EditText, "", DropTab, 120, 64, 100, 20, 0, 0 )
constant DropUserName = createEx( EditText, "", DropTab, 228, 64, 200, 20, 0, 0 )
setEnable( DropUserName, w32False )
constant DropNumber = createEx( EditText, "", DropTab, 120, 116, 100, 20, 0, 0 )
constant DropLocation = createEx( EditText, "", DropTab, 120, 160, 100, 20, 0, 0 )
constant DropComments = createEx( MleText, "", DropTab, 120, 212, 320, 148, 0, 0 )
constant LText113 = createEx( LText, "User ID:", DropTab, 12, 64, 60, 20, 0, 0 )
constant LText114 = createEx( LText, "Drop number:", DropTab, 12, 116, 75, 20, 0, 0 )
constant LText115 = createEx( LText, "Location", DropTab, 12, 160, 60, 20, 0, 0 )
constant LText116 = createEx( LText, "Comments", DropTab, 12, 212, 60, 20, 0, 0 )

constant MultipleWin = createEx(Window,"Multiple Assets",MISdb,0,0,200,300,0,0)
constant MultipleLabel1 = createEx(CText,"Enter Serial Numbers to create:",MultipleWin,50,20,100,25,0,0)
constant MultipleSN1 = createEx(EditText,"",MultipleWin,50,50,100,20,0,0)
constant MultipleAddButton = createEx(PushButton,"Add SN",MultipleWin,30,80,60,25,0,0)
constant MultipleClearButton = createEx(PushButton,"Clear SNs",MultipleWin,110,80,60,25,0,0)
constant MultipleSNList = createEx(LText,"",MultipleWin,10,130,180,70,0,0)
constant MultipleSaveButton = createEx(PushButton,"Save Assets",MultipleWin,65,210,70,25,0,0)
constant MultipleCancelButton = createEx(PushButton,"Cancel save",MultipleWin,65,240,70,25,0,0)

--------------------------------------------------------------------------------
-- GLOBAL CONSTANTS / VARIABLES
--------------------------------------------------------------------------------
global atom dbconn
global atom guimode, guion

global sequence user_cur, asset_cur, license_cur, drop_cur

user_cur = {}
asset_cur = {}
license_cur = {}
drop_cur = {}

--------------------------------------------------------------------------------
-- SUPPORT ROUTINES
--------------------------------------------------------------------------------

function trim(object s)

  if not sequence(s) then
    return s
  end if

  for ctr = 1 to length(s) do
    if atom(s[ctr]) and s[ctr]>32 then
      s = s[ctr..length(s)]
      exit
    end if
  end for
  for ctr = length(s) to 1 by -1 do
    if atom(s[ctr]) and s[ctr]>32 then
      s = s[1..ctr]
      exit
    end if
  end for

  return s

end function

--------------------------------------------------------------------------------

procedure clearAll(object parent)

  object ot
  sequence children,tc,tc2

  children = getChildren(parent)
  ot = getControlInfo(parent,CONTROLINFO_type)

  if length(children)>0 and ot = TabControl then
    tc2 = {}
    for ctr = 1 to length(children[1]) do
      tc = getChildren(children[1][ctr])
      if length(tc2) = 0 then
        tc2 = tc
      else
        tc2[1] = tc2[1] & tc[1]
        tc2[2] = tc2[2] & tc[2]
      end if
    end for
    children = tc2
  end if

  for ctr = 1 to length(children[2]) do
    if children[2][ctr] = EditText or children[2][ctr] = MleText then
      setText(children[1][ctr],"")
    end if
  end for

end procedure

--------------------------------------------------------------------------------

procedure showUser(atom idx)

  if length(user_cur)=0 or idx > length(user_cur) or idx < 1 then
    return
  end if

  setText(UserIDEdit,sprintf("%d",user_cur[idx][1]))
  setText(FirstNameEdit,user_cur[idx][2])
  setText(LastNameEdit,user_cur[idx][3])
  setText(UsernameEdit,user_cur[idx][4])
  setText(LocationEdit,user_cur[idx][6])
  setText(DepartmentEdit,user_cur[idx][7])
  setText(TerminatedEdit,user_cur[idx][8])
  setText(UserNotesEdit,user_cur[idx][9])
  if atom(user_cur[idx][10]) then
    setText(ExtEdit,sprintf("%d",user_cur[idx][10]))
  elsif length(user_cur[idx][10])=2 then
    setText(ExtEdit,sprintf("%d",user_cur[idx][10][1]+(user_cur[idx][10][2]*256)))
  else
    setText(ExtEdit,user_cur[idx][10])
  end if
  if isChecked(ShowPWCheck) then
    setText(PasswordEdit,user_cur[idx][5])
  end if

  setText(MISdb,sprintf("MISdb - User %d/%d",{idx,length(user_cur)}))

end procedure

--------------------------------------------------------------------------------

procedure showAsset(atom idx)

  sequence SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor

  if length(asset_cur)=0 or idx > length(asset_cur) or idx < 1 then
    return
  end if

  SQLquery = "SELECT * FROM users WHERE pkey=\'"&sprintf("%d",asset_cur[idx][2])&"\'"
  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  if length(SQLcursor)>0 then
    setText(AssetUsername,SQLcursor[1][2]&" "&SQLcursor[1][3])
    setText(AssetDepartment,SQLcursor[1][7])
  end if

  setText(AssetID,sprintf("%d",asset_cur[idx][1]))
  setText(AssetUserID,sprintf("%d",asset_cur[idx][2]))
  setText(AssetType,asset_cur[idx][3])
  setText(AssetSN,asset_cur[idx][4])
  setText(AssetMfgr,asset_cur[idx][5])
  setText(AssetModel,asset_cur[idx][6])
  setText(AssetCPUType,asset_cur[idx][7])
  if atom(asset_cur[idx][8]) then
    setText(AssetCPUSpeed,sprintf("%d",asset_cur[idx][8]))
  elsif length(asset_cur[idx][8])=2 then
    setText(AssetCPUSpeed,sprintf("%d",asset_cur[idx][8][1]+(asset_cur[idx][8][2]*256)))
  else
    setText(AssetCPUSpeed,asset_cur[idx][8])
  end if
  setText(AssetMemoryType,asset_cur[idx][9])
  if atom(asset_cur[idx][10]) then
    setText(AssetMemoryMB,sprintf("%d",asset_cur[idx][10]))
  elsif length(asset_cur[idx][10])=2 then
    setText(AssetMemoryMB,sprintf("%d",asset_cur[idx][10][1]+(asset_cur[idx][10][2]*256)))
  else
    setText(AssetMemoryMB,asset_cur[idx][10])
  end if
  if atom(asset_cur[idx][11]) then
    setText(AssetHDGB,sprintf("%d",asset_cur[idx][11]))
  elsif length(asset_cur[idx][11])=2 then
    setText(AssetHDGB,sprintf("%d",asset_cur[idx][11][1]+(asset_cur[idx][11][2]*256)))
  else
    setText(AssetHDGB,asset_cur[idx][11])
  end if
  setText(AssetLocation,asset_cur[idx][12])
  setText(AssetNotes,asset_cur[idx][13])

  setText(MISdb,sprintf("MISdb - Asset %d/%d",{idx,length(asset_cur)}))

end procedure

--------------------------------------------------------------------------------

procedure showLicense(atom idx)

  sequence SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor

  if length(license_cur)=0 or idx > length(license_cur) or idx < 1 then
    return
  end if

  SQLquery = "SELECT * FROM assets WHERE pkey=\'"&sprintf("%d",license_cur[idx][2])&"\'"
  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  if length(SQLcursor)>0 then
    setText(LicenseAssetDescrip,
            trim(SQLcursor[1][4])&
            " "&trim(SQLcursor[1][5])&
            " "&trim(SQLcursor[1][3])&
            " "&trim(SQLcursor[1][6]))
  end if

  setText(LicenseID,sprintf("%d",license_cur[idx][1]))
  setText(LicenseAsset,sprintf("%d",license_cur[idx][2]))
  setText(LicenseKey,license_cur[idx][3])
  if atom(license_cur[idx][4]) then
    setText(LicenseSeq,sprintf("%d",license_cur[idx][4]))
  elsif length(license_cur[idx][4])=2 then
    setText(LicenseSeq,sprintf("%d",license_cur[idx][4][1]+(license_cur[idx][4][2]*256)))
  else
    setText(LicenseSeq,license_cur[idx][4])
  end if
  setText(LicenseSWCompany,license_cur[idx][5])
  setText(LicenseSWTitle,license_cur[idx][6])
  setText(LicenseSWVersion,license_cur[idx][7])
  setText(LicenseDescrip,license_cur[idx][8])
  setText(LicenseMediaCabinet,license_cur[idx][9])
  setText(LicenseMediaFolder,license_cur[idx][10])

  setText(MISdb,sprintf("MISdb - License %d/%d",{idx,length(license_cur)}))

end procedure

--------------------------------------------------------------------------------

procedure showDrop(atom idx)

  sequence SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor

  if length(drop_cur)=0 or idx > length(drop_cur) or idx < 1 then
    return
  end if

  SQLquery = "SELECT * FROM users WHERE pkey=\'"&sprintf("%d",drop_cur[idx][1])&"\'"
  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  if length(SQLcursor)>0 then
    setText(DropUserName,SQLcursor[1][2]&" "&SQLcursor[1][3])
  end if

  setText(DropUserID,sprintf("%d",drop_cur[idx][1]))
  setText(DropNumber,drop_cur[idx][2])
  setText(DropLocation,drop_cur[idx][3])
  setText(DropComments,drop_cur[idx][4])

  setText(MISdb,sprintf("MISdb - Drop %d/%d",{idx,length(drop_cur)}))

end procedure

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

procedure onCheck_ShowPassword(object self, object event, object params)

  object temp
  atom cptr

  if guimode = MODE_BROWSE then
    temp = getText(MISdb)
    cptr = find(' ',temp)
    while cptr > 0 do
      temp = temp[cptr+1..length(temp)]
      cptr = find(' ',temp)
    end while
    cptr = find('/',temp)
    if cptr > 0 then
      temp = temp[1..cptr-1]
    end if
    temp = value(temp)
    if temp[1]=GET_SUCCESS then
      cptr = temp[2]
    else
      cptr = 0
    end if
  else
    cptr = 0
  end if

  if isChecked(ShowPWCheck) then
    setEnable(PasswordEdit,w32True)
    if cptr > 0 then
      setText(PasswordEdit,user_cur[cptr][5])
    end if
  else
    user_cur[cptr][5] = getText(PasswordEdit)
    setText(PasswordEdit,"")
    setEnable(PasswordEdit,w32False)
  end if

end procedure
setHandler(ShowPWCheck,w32HClick,routine_id("onCheck_ShowPassword"))

--------------------------------------------------------------------------------

procedure saveUser()

  sequence usercnames, userdata, SQLquery
  atom SQLhandle, cptr
  object SQLdata, SQLcursor, temp
  userdata = repeat("",10)

  usercnames = {"pkey","first_name","last_name","username","PW",
               "location","dept","terminated","notes","extension"}

  userdata[1] = getText(UserIDEdit)
  userdata[2] = getText(FirstNameEdit)
  userdata[3] = getText(LastNameEdit)
  userdata[4] = getText(UsernameEdit)
  userdata[5] = getText(PasswordEdit)
  userdata[6] = getText(LocationEdit)
  userdata[7] = getText(DepartmentEdit)
  userdata[8] = getText(TerminatedEdit)
  userdata[10] = getText(ExtEdit)
  userdata[9] = getText(UserNotesEdit)

  cptr = 0
  if guimode = MODE_BROWSE then
    temp = getText(MISdb)
    cptr = find(' ',temp)
    while cptr > 0 do
      temp = temp[cptr+1..length(temp)]
      cptr = find(' ',temp)
    end while
    cptr = find('/',temp)
    if cptr > 0 then
      temp = temp[1..cptr-1]
    end if
    temp = value(temp)
    if temp[1]=GET_SUCCESS then
      cptr = temp[2]
    else
      cptr = 0
    end if
    if cptr = 0 then
      temp = message_box("You cannot save changes to an empty search.","Don\'t save",
        MB_ICONWARNING)
      return
    end if
    SQLcursor = user_cur
  elsif MODE_NEW then
    SQLquery = "SELECT * FROM users WHERE pkey=\'"&userdata[1]&"\' OR " &
             "username=\'"&userdata[4]&"\' OR (first_name=\'"&userdata[2]&
             "\' AND last_name=\'"&userdata[3]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
  end if

  -- validate data
  if match(trim(userdata[8]),"YyNn")=0 then     -- use match instead of find b/c userdata[8] is a sequence, not an atom.
    userdata[8]='N'
  end if
  while find('\'',userdata[9]) do
    userdata[9][find('\'',userdata[9])]=' '
  end while
  if not isChecked(ShowPWCheck) then
    if guimode = MODE_BROWSE and cptr > 0 then
      userdata[5] = SQLcursor[cptr][5]
    elsif guimode = MODE_NEW then
      temp = message_box("You must have the <Show Password> box checked in order "&
           "to save passwords to the database.","PW notice",MB_ICONWARNING)
    end if
  end if

  -- save
  if guimode = MODE_NEW and length(SQLcursor)=0 then
    SQLquery = "INSERT INTO users (first_name,last_name,username,PW," &
               "location,dept,terminated,notes,extension) VALUES (\'" &
               userdata[2]&"\',\'"&userdata[3]&"\',\'"&userdata[4]&"\',\'"&
               userdata[5]&"\',\'"&userdata[6]&"\',\'"&userdata[7]&"\',\'"&
               userdata[8]&"\',\'"&userdata[9]&"\',\'"&userdata[10]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
  elsif guimode = MODE_NEW then   -- record already exists
    temp = message_box("This user has already been entered.  Please browse and "&
         "edit information instead","Save user",MB_ICONWARNING)
  elsif guimode = MODE_BROWSE and length(SQLcursor)>=1 then
    SQLquery = "UPDATE users SET "
    for ctr = 2 to length(userdata) do
      if compare(trim(userdata[ctr]),trim(SQLcursor[cptr][ctr]))!=0 then
        if length(SQLquery)>17 then
          SQLquery = SQLquery & ','
        end if
        SQLquery = SQLquery & usercnames[ctr] & "=\'" & trim(userdata[ctr]) & "\'"
      end if
    end for
    SQLquery = SQLquery & " WHERE pkey=\'"&userdata[1]&"\'"
--    temp = message_box(SQLquery,"Query",MB_OK)
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)

  elsif guimode = MODE_BROWSE and length(SQLcursor)=0 then
    -- Arriving here would indicate a serious bug elsewhere in the program.
  end if

  if guimode = MODE_NEW then
    SQLquery = "SELECT * FROM users WHERE pkey=\'"&userdata[1]&"\' OR " &
             "username=\'"&userdata[4]&"\' OR (first_name=\'"&userdata[2]&
             "\' AND last_name=\'"&userdata[3]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    user_cur = SQLcursor
    showUser(1)
    guimode = MODE_BROWSE
  elsif guimode = MODE_BROWSE then
    user_cur[cptr] = userdata
    temp = message_box("Your changes were saved successfully.","SQL update",MB_OK)
  end if


end procedure

--------------------------------------------------------------------------------

procedure saveAsset()

  sequence assetcnames, assetdata, SQLquery
  atom SQLhandle, cptr
  object SQLdata, SQLcursor, temp
  assetdata = repeat("",13)

  assetcnames = {"pkey","userID","type","serial_num","mfgr","model","cpu_type",
               "cpu_speed","memory_type","memory_MB","harddrive_GB","location","notes"}

  assetdata[1] = getText(AssetID)
  assetdata[2] = getText(AssetUserID)
  assetdata[3] = getText(AssetType)
  assetdata[4] = getText(AssetSN)
  assetdata[5] = getText(AssetMfgr)
  assetdata[6] = getText(AssetModel)
  assetdata[7] = getText(AssetCPUType)
  assetdata[8] = getText(AssetCPUSpeed)
  assetdata[10] = getText(AssetMemoryMB)
  assetdata[11] = getText(AssetHDGB)
  assetdata[12] = getText(AssetLocation)
  assetdata[9] = getText(AssetMemoryType)
  assetdata[13] = getText(AssetNotes)
--  assetdata[14] = getText(AssetUsername)

  if length(assetdata[1])=0 then
    assetdata[1]="0"
  end if

  if guimode = MODE_BROWSE then
    temp = getText(MISdb)
    cptr = find(' ',temp)
    while cptr > 0 do
      temp = temp[cptr+1..length(temp)]
      cptr = find(' ',temp)
    end while
    cptr = find('/',temp)
    if cptr > 0 then
      temp = temp[1..cptr-1]
    end if
    temp = value(temp)
    if temp[1]=GET_SUCCESS then
      cptr = temp[2]
    else
      cptr = 0
    end if
    if cptr = 0 then
      temp = message_box("You cannot save changes to an empty search.","Don\'t save",
        MB_ICONWARNING)
      return
    end if
    SQLcursor = asset_cur
  elsif MODE_NEW then
    SQLquery = "SELECT * FROM assets WHERE pkey="&assetdata[1]&" OR " &
             "serial_num=\'"&assetdata[4]&"\'"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
  end if

  -- validate data
  while find('\'',assetdata[13])>0 do
    assetdata[13][find('\'',assetdata[13])]=' '
  end while

     -- valid user?
  -- save
  if guimode = MODE_NEW and length(SQLcursor)=0 then
    SQLquery = "INSERT INTO assets (userID,type,serial_num,mfgr,model,cpu_type,"&
               "cpu_speed,memory_type,memory_MB,harddrive_GB,location,notes) VALUES (\'" &
               assetdata[2]&"\',\'"&assetdata[3]&"\',\'"&assetdata[4]&"\',\'"&
               assetdata[5]&"\',\'"&assetdata[6]&"\',\'"&assetdata[7]&"\',\'"&
               assetdata[8]&"\',\'"&assetdata[9]&"\',\'"&assetdata[10]&"\',\'"&
               assetdata[11]&"\',\'"&assetdata[12]&"\',\'"&assetdata[13]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)

  elsif guimode = MODE_NEW then   -- record already exists
    temp = message_box("This record already exists.","Save error",MB_ICONWARNING)
  elsif guimode = MODE_BROWSE and length(SQLcursor)>=1 then
    SQLquery = "UPDATE assets SET "
    for ctr = 2 to length(assetdata) do
      if compare(trim(assetdata[ctr]),trim(SQLcursor[cptr][ctr]))!=0 then
        if find(ctr,{1,2,8,10,11}) > 0 and atom(SQLcursor[cptr][ctr])then
          temp = value(assetdata[ctr])
          if (temp[1] = GET_SUCCESS and temp[2] != SQLcursor[cptr][ctr]) or
             temp[1] != GET_SUCCESS then
            if length(SQLquery)>18 then
              SQLquery = SQLquery & ','
            end if
            SQLquery = SQLquery & assetcnames[ctr] & "=\'" & trim(assetdata[ctr]) & "\'"
          end if
        else
          if length(SQLquery)>18 then
            SQLquery = SQLquery & ','
          end if
          SQLquery = SQLquery & assetcnames[ctr] & "=\'" & trim(assetdata[ctr]) & "\'"
        end if
      end if
    end for
    SQLquery = SQLquery & " WHERE pkey=\'"&assetdata[1]&"\'"
    -- temp = message_box(SQLquery,"Query",MB_OK)
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    if SQLdata < 0 then
      return
    end if
  elsif guimode = MODE_BROWSE and length(SQLcursor)=0 then
    -- Arriving here would indicate a serious bug elsewhere in the program.
  end if

  if guimode = MODE_NEW then
    SQLquery = "SELECT * FROM assets WHERE pkey="&assetdata[1]&" OR " &
             "serial_num=\'"&assetdata[4]&"\'"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    asset_cur = SQLcursor

    showAsset(1)
    guimode = MODE_BROWSE
  elsif guimode = MODE_BROWSE then
    temp = value(assetdata[1])
    if temp[1]=GET_SUCCESS then
      assetdata[1] = temp[2]
    end if
    temp = value(assetdata[2])
    if temp[1]=GET_SUCCESS then
      assetdata[2] = temp[2]
    end if
    temp = value(assetdata[8])
    if temp[1]=GET_SUCCESS then
      assetdata[8] = temp[2]
    end if
    temp = value(assetdata[10])
    if temp[1]=GET_SUCCESS then
      assetdata[10] = temp[2]
    end if
    temp = value(assetdata[11])
    if temp[1]=GET_SUCCESS then
      assetdata[11] = temp[2]
    end if
    asset_cur[cptr] = assetdata
    temp = message_box("Your changes were saved successfully.","SQL update",MB_OK)
  end if

end procedure

--------------------------------------------------------------------------------

procedure saveLicense()

  sequence licensecnames, licensedata, SQLquery
  atom SQLhandle
  object cptr, temp, temp2
  object SQLdata, SQLcursor
  licensedata = repeat("",12)

  licensecnames = {"pkey","asset","license_key","seq_num","sw_company",
               "sw_title","sw_version","description","media_cabinet","media_folder"}

  licensedata[1] = getText(LicenseID)
  licensedata[2] = getText(LicenseAsset)
  licensedata[3] = getText(LicenseKey)
  licensedata[4] = getText(LicenseSeq)
  licensedata[5] = getText(LicenseSWCompany)
  licensedata[6] = getText(LicenseSWTitle)
  licensedata[7] = getText(LicenseSWVersion)
  licensedata[8] = getText(LicenseDescrip)
  licensedata[9] = getText(LicenseMediaCabinet)
  licensedata[10] = getText(LicenseMediaFolder)
  licensedata[11] = getText(LicenseAssetDescrip)
  licensedata[12] = getText(LicenseMassCreate)

  if guimode = MODE_BROWSE then
    temp = getText(MISdb)
    cptr = find(' ',temp)
    while cptr > 0 do
      temp = temp[cptr+1..length(temp)]
      cptr = find(' ',temp)
    end while
    cptr = find('/',temp)
    if cptr > 0 then
      temp = temp[1..cptr-1]
    end if
    temp = value(temp)
    if temp[1]=GET_SUCCESS then
      cptr = temp[2]
    else
      cptr = 0
    end if
    if cptr = 0 then
      temp = message_box("You cannot save changes to an empty search.","Don\'t save",
        MB_ICONWARNING)
      return
    end if
    SQLcursor = license_cur
  elsif guimode = MODE_NEW then
    SQLquery = "SELECT * FROM licenses WHERE pkey=\'"&sprintf("%d",licensedata[1])&"\' OR " &
             "(license_key=\'"&licensedata[3]&"\' AND seq_num=\'" &
             licensedata[4]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
  end if

  -- validate data
    -- valid assetID?
  -- save
  if guimode = MODE_NEW and length(SQLcursor)=0 then
    SQLquery = "INSERT INTO licenses (asset,license_key,seq_num,sw_company,"&
               "sw_title,sw_version,description,media_cabinet,media_folder) VALUES (\'" &
               licensedata[2]&"\',\'"&licensedata[3]&"\',\'"&licensedata[4]&"\',\'"&
               licensedata[5]&"\',\'"&licensedata[6]&"\',\'"&licensedata[7]&"\',\'"&
               licensedata[8]&"\',\'"&licensedata[9]&"\',\'"&licensedata[10]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)

  elsif guimode = MODE_NEW then   -- record already exists

  elsif guimode = MODE_BROWSE and length(SQLcursor)>=1 then
    SQLquery = "UPDATE licenses SET "
    for ctr = 2 to 10 do
      if compare(trim(licensedata[ctr]),trim(SQLcursor[cptr][ctr]))!=0 then
        if length(SQLquery)>20 then
          SQLquery = SQLquery & ','
        end if
        if find(ctr,{1,2,4}) > 0 and atom(SQLcursor[cptr][ctr])then
          temp = value(licensedata[ctr])
          if (temp[1] = GET_SUCCESS and temp[2] != SQLcursor[cptr][ctr]) or
             temp[1] != GET_SUCCESS then
            SQLquery = SQLquery & licensecnames[ctr] & "=" & trim(licensedata[ctr])
          end if
        else
          SQLquery = SQLquery & licensecnames[ctr] & "=\'" & trim(licensedata[ctr]) & "\'"
        end if
      end if
    end for
    SQLquery = SQLquery & " WHERE pkey=\'"&sprintf("%d",licensedata[1])&"\'"
    -- temp = message_box(SQLquery,"Query",MB_OK)
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    if SQLdata < 0 then
      return
    end if
  elsif guimode = MODE_BROWSE and length(SQLcursor)=0 then
    -- Arriving here would indicate a serious bug elsewhere in the program.
  end if

  if guimode = MODE_NEW then

    SQLquery = "SELECT * FROM licenses WHERE pkey=\'"&sprintf("%d",licensedata[1])&"\' OR " &
             "(license_key=\'"&licensedata[3]&"\' AND seq_num=\'" &
             licensedata[4]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    license_cur = SQLcursor

    showLicense(1)
    guimode = MODE_BROWSE
  elsif guimode = MODE_BROWSE then
    temp = value(licensedata[1])
    if temp[1]=GET_SUCCESS then
      licensedata[1] = temp[2]
    end if
    temp = value(licensedata[2])
    if temp[1]=GET_SUCCESS then
      licensedata[2] = temp[2]
    end if
    license_cur[cptr] = licensedata
    temp = message_box("Your changes were saved successfully.","SQL update",MB_OK)
  end if

end procedure

--------------------------------------------------------------------------------

procedure saveDrop()

  sequence dropcnames, dropdata, SQLquery
  atom SQLhandle, cptr
  object SQLdata, SQLcursor, temp
  dropdata = repeat("",5)

  dropcnames = {"userID","drop_num","location","comments"}

  dropdata[1] = getText(DropUserID)
  dropdata[5] = getText(DropUserName)
  dropdata[2] = getText(DropNumber)
  dropdata[3] = getText(DropLocation)
  dropdata[4] = getText(DropComments)

  temp = find('\'',dropdata[4])
  while temp > 0 do
    dropdata[4][temp] = ' '
    temp = find('\'',dropdata[4])
  end while

  if guimode = MODE_BROWSE then
    temp = getText(MISdb)
    cptr = find(' ',temp)
    while cptr > 0 do
      temp = temp[cptr+1..length(temp)]
      cptr = find(' ',temp)
    end while
    cptr = find('/',temp)
    if cptr > 0 then
      temp = temp[1..cptr-1]
    end if
    temp = value(temp)
    if temp[1]=GET_SUCCESS then
      cptr = temp[2]
    else
      cptr = 0
    end if
    if cptr = 0 then
      temp = message_box("You cannot save changes to an empty search.","Don\'t save",
        MB_ICONWARNING)
      return
    end if
    SQLcursor = drop_cur
  elsif guimode = MODE_NEW then
    SQLquery = "SELECT * FROM drops WHERE " &
             "(drop_num=\'"&dropdata[2]&"\' AND location=\'"&
             dropdata[3]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
  end if


  -- validate data
    -- valid userID?
  -- save
  if guimode = MODE_NEW and length(SQLcursor)=0 then
    SQLquery = "INSERT INTO drops (userID,drop_num,location,comments) VALUES (\'" &
               dropdata[1]&"\',\'"&dropdata[2]&"\',\'"&dropdata[3]&"\',\'"&
               dropdata[4]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)

  elsif guimode = MODE_NEW then   -- record already exists

  elsif guimode = MODE_BROWSE and length(SQLcursor)>=1 then
    SQLquery = "DELETE FROM drops WHERE userID=\'"&sprintf("%d",SQLcursor[cptr][1])&"\' AND " &
      "drop_num=\'"&SQLcursor[cptr][2]&"\' AND location=\'"&SQLcursor[cptr][3]&"\'"
    -- temp = message_box(SQLquery,"Query",MB_OK)
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    SQLquery = "INSERT INTO drops (userID,drop_num,location,comments) VALUES (\'" &
               dropdata[1]&"\',\'"&dropdata[2]&"\',\'"&dropdata[3]&"\',\'"&
               dropdata[4]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
    end if
    freeStmt(SQLhandle,SQL_RESET_PARAMS)

  elsif guimode = MODE_BROWSE and length(SQLcursor)=0 then
    -- Arriving here would indicate a serious bug elsewhere in the program.
  end if

  if guimode = MODE_NEW then
    SQLquery = "SELECT * FROM drops WHERE userID=\'"&dropdata[1]&"\' OR " &
             "(drop_num=\'"&dropdata[2]&"\' AND location=\'"&
             dropdata[3]&"\')"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    drop_cur = SQLcursor

    showDrop(1)
    guimode = MODE_BROWSE
  elsif guimode = MODE_BROWSE then
    temp = value(dropdata[1])
    if temp[1]=GET_SUCCESS then
      dropdata[1] = temp[2]
    end if
    drop_cur[cptr] = dropdata[1..4]
    temp = message_box("Your changes were saved successfully.","SQL update",MB_OK)
  end if

end procedure

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

procedure searchUser()

  sequence usercnames, userdata, SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor
  userdata = repeat("",10)

  usercnames = {"pkey","first_name","last_name","username","PW",
               "location","dept","terminated","notes","extension"}

  userdata[1] = getText(UserIDEdit)
  userdata[2] = getText(FirstNameEdit)
  userdata[3] = getText(LastNameEdit)
  userdata[4] = getText(UsernameEdit)
  userdata[5] = getText(PasswordEdit)
  userdata[6] = getText(LocationEdit)
  userdata[7] = getText(DepartmentEdit)
  userdata[8] = getText(TerminatedEdit)
  userdata[10] = getText(ExtEdit)
  userdata[9] = getText(UserNotesEdit)

  SQLquery = "SELECT * from users WHERE "

  for ctr = 1 to length(userdata) do
    while find('*',userdata[ctr])>0 do
      userdata[ctr][find('*',userdata[ctr])] = '%'
    end while
    while find('?',userdata[ctr])>0 do
      userdata[ctr][find('?',userdata[ctr])] = '_'
    end while
    if compare(trim(userdata[ctr]),"=")=0 then
      SQLquery = SQLquery & usercnames[ctr] & "=\'\' AND "
    elsif length(userdata[ctr]) > 0 and find('%',userdata[ctr])=0 and find('_',userdata[ctr])=0 then
      SQLquery = SQLquery & usercnames[ctr] & "=\'" & userdata[ctr] & "\' AND "
    elsif length(userdata[ctr]) > 0 then
      SQLquery = SQLquery & usercnames[ctr] & " LIKE \'" & userdata[ctr] & "\' AND "
    end if
  end for

  if compare(SQLquery[length(SQLquery)-5..length(SQLquery)],"WHERE ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-7]
  elsif compare(SQLquery[length(SQLquery)-3..length(SQLquery)],"AND ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-5]
  end if

  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  user_cur = SQLcursor

  showUser(1)
  guimode = MODE_BROWSE

end procedure

--------------------------------------------------------------------------------

procedure searchAsset()

  sequence assetcnames, assetdata, SQLquery, userlist
  sequence firstname,lastname
  atom SQLhandle
  object SQLdata, SQLcursor
  assetdata = repeat("",15)

  assetcnames = {"pkey","userID","type","serial_num","mfgr","model","cpu_type",
               "cpu_speed","memory_type","memory_MB","harddrive_GB","location","notes"}

  assetdata[1] = getText(AssetID)
  assetdata[2] = trim(getText(AssetUserID))
  assetdata[3] = getText(AssetType)
  assetdata[4] = getText(AssetSN)
  assetdata[5] = getText(AssetMfgr)
  assetdata[6] = getText(AssetModel)
  assetdata[7] = getText(AssetCPUType)
  assetdata[8] = getText(AssetCPUSpeed)
  assetdata[10] = getText(AssetMemoryMB)
  assetdata[11] = getText(AssetHDGB)
  assetdata[12] = getText(AssetLocation)
  assetdata[9] = getText(AssetMemoryType)
  assetdata[13] = getText(AssetNotes)
  assetdata[14] = trim(getText(AssetUsername))
  assetdata[15] = trim(getText(AssetDepartment))

  userlist = {}
  if length((assetdata[2]))=0 and (length((assetdata[14]))>0 or length((assetdata[15]))>0) then
    while find('*',assetdata[15])>0 do
      assetdata[15][find('*',assetdata[15])]='%'
    end while
    while find('?',assetdata[15])>0 do
      assetdata[15][find('?',assetdata[15])]='_'
    end while
    SQLquery = "SELECT pkey from users WHERE "
    if length((assetdata[15]))>0 and find('%',assetdata[15])=0 and find('_',assetdata[15])=0 then
      SQLquery = SQLquery & "dept=\'"&(assetdata[15])&"\' "
    elsif length(assetdata[15])>0 then
      SQLquery = SQLquery & "dept LIKE \'"&(assetdata[15])&"\' "
    end if
    if length(assetdata[15])>0 and length(assetdata[14])>0 then
      SQLquery = SQLquery & "AND "
    end if
    while find('*',assetdata[14])>0 do
      assetdata[14][find('*',assetdata[14])]='%'
    end while
    while find('?',assetdata[14])>0 do
      assetdata[14][find('?',assetdata[14])]='_'
    end while
    if length(assetdata[14])>0 and find(' ',assetdata[14])>0 then
      firstname=assetdata[14][1..find(' ',assetdata[14])-1]
      lastname=assetdata[14][find(' ',assetdata[14])+1..length(assetdata[14])]
      if find('%',firstname) or find('_',firstname) then
        SQLquery = SQLquery & "first_name LIKE \'" & firstname & "\' AND "
      else
        SQLquery = SQLquery & "first_name=\'"&firstname&"\' AND "
      end if
      if find('%',lastname) or find('_',lastname) then
        SQLquery = SQLquery & "last_name LIKE \'" & lastname & "\'"
      else
        SQLquery = SQLquery & "last_name=\'"&lastname&"\'"
      end if
    elsif length(assetdata[14])>0 then
      if find('%',assetdata[14]) or find('_',assetdata[14]) then
        SQLquery = SQLquery & "(first_name LIKE \'" & assetdata[14] & "\' OR last_name LIKE \'" &
                   assetdata[14] & "\')"
      else
        SQLquery = SQLquery & "(first_name=\'"&assetdata[14]&"\' OR last_name=\'" &
                   assetdata[14] & "\')"
      end if
    end if

    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      return
    end if

    SQLcursor = {}
    SQLdata = odbc:getData(SQLhandle)
    while sequence(SQLdata) and length(SQLdata) > 0 do
      SQLcursor = SQLcursor & SQLdata
      SQLdata = odbc:getData(SQLhandle)
    end while
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    for ctr = 1 to length(SQLcursor) do
      userlist = userlist & SQLcursor[ctr][1]
    end for

  end if

  SQLquery = "SELECT * from assets WHERE "

  for ctr = 1 to length(assetcnames) do
    while find('*',assetdata[ctr])>0 do
      assetdata[ctr][find('*',assetdata[ctr])]='%'
    end while
    while find('?',assetdata[ctr])>0 do
      assetdata[ctr][find('?',assetdata[ctr])]='_'
    end while
    if compare(trim(assetdata[ctr]),"=")=0 then
      SQLquery = SQLquery & assetcnames[ctr] & "=\'\' AND "
    elsif length(assetdata[ctr]) > 0 and find('%',assetdata[ctr])=0 and find('_',assetdata[ctr])=0 then
      SQLquery = SQLquery & assetcnames[ctr] & "=\'" & assetdata[ctr] & "\' AND "
    elsif length(assetdata[ctr]) > 0 then
      SQLquery = SQLquery & assetcnames[ctr] & " LIKE \'" & assetdata[ctr] & "\' AND "
    end if
  end for

  if length(userlist)>0 then
    SQLquery = SQLquery & "("
    for ctr = 1 to length(userlist) do
      SQLquery = SQLquery & "userID=" & sprintf("%d",userlist[ctr])
      if ctr < length(userlist) then
        SQLquery = SQLquery & " OR "
      end if
    end for
    SQLquery = SQLquery & ")"
  end if

  if compare(SQLquery[length(SQLquery)-5..length(SQLquery)],"WHERE ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-7]
  elsif compare(SQLquery[length(SQLquery)-3..length(SQLquery)],"AND ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-5]
  end if

  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  asset_cur = SQLcursor

  showAsset(1)
  guimode = MODE_BROWSE

end procedure

--------------------------------------------------------------------------------

procedure searchLicense()

  sequence licensecnames, licensedata, SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor
  licensedata = repeat("",12)

  licensecnames = {"pkey","asset","license_key","seq_num","sw_company",
               "sw_title","sw_version","description","media_cabinet","media_folder"}

  licensedata[1] = getText(LicenseID)
  licensedata[2] = getText(LicenseAsset)
  licensedata[3] = getText(LicenseKey)
  licensedata[4] = getText(LicenseSeq)
  licensedata[5] = getText(LicenseSWCompany)
  licensedata[6] = getText(LicenseSWTitle)
  licensedata[7] = getText(LicenseSWVersion)
  licensedata[8] = getText(LicenseDescrip)
  licensedata[9] = getText(LicenseMediaCabinet)
  licensedata[10] = getText(LicenseMediaFolder)
  licensedata[11] = getText(LicenseAssetDescrip)
  licensedata[12] = getText(LicenseMassCreate)

  SQLquery = "SELECT * from licenses WHERE "

  for ctr = 1 to length(licensecnames) do
    while find('*',licensedata[ctr])>0 do
      licensedata[ctr][find('*',licensedata[ctr])]='%'
    end while
    while find('?',licensedata[ctr])>0 do
      licensedata[ctr][find('?',licensedata[ctr])]='_'
    end while
    if compare(trim(licensedata[ctr]),"=")=0 then
      SQLquery = SQLquery & licensecnames[ctr] & "=\'\' AND "
    elsif length(licensedata[ctr]) > 0 and find('%',licensedata[ctr])=0 and find('_',licensedata[ctr])=0 then
      SQLquery = SQLquery & licensecnames[ctr] & "=\'" & licensedata[ctr] & "\' AND "
    elsif length(licensedata[ctr])>0 then
      SQLquery = SQLquery & licensecnames[ctr] & " LIKE \'" & licensedata[ctr] & "\' AND "
    end if
  end for

  if compare(SQLquery[length(SQLquery)-5..length(SQLquery)],"WHERE ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-7]
  elsif compare(SQLquery[length(SQLquery)-3..length(SQLquery)],"AND ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-5]
  end if

  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  license_cur = SQLcursor

  showLicense(1)
  guimode = MODE_BROWSE

end procedure

--------------------------------------------------------------------------------

procedure searchDrop()

  sequence dropcnames, dropdata, SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor
  dropdata = repeat("",5)

  dropcnames = {"userID","drop_num","location","comments"}

  dropdata[1] = getText(DropUserID)
  dropdata[5] = getText(DropUserName)
  dropdata[2] = getText(DropNumber)
  dropdata[3] = getText(DropLocation)
  dropdata[4] = getText(DropComments)

  SQLquery = "SELECT * from drops WHERE "

  for ctr = 1 to length(dropcnames) do
    while find('*',dropdata[ctr])>0 do
      dropdata[ctr][find('*',dropdata[ctr])]='%'
    end while
    while find('?',dropdata[ctr])>0 do
      dropdata[ctr][find('?',dropdata[ctr])]='_'
    end while
    if compare(trim(dropdata[ctr]),"=")=0 then
      SQLquery = SQLquery & dropcnames[ctr] & "=\'\' AND "
    elsif length(dropdata[ctr]) > 0 and find('%',dropdata[ctr])=0 and find('_',dropdata[ctr])=0 then
      SQLquery = SQLquery & dropcnames[ctr] & "=\'" & dropdata[ctr] & "\' AND "
    elsif length(dropdata[ctr])>0 then
      SQLquery = SQLquery & dropcnames[ctr] & " LIKE \'" & dropdata[ctr] & "\' AND "
    end if
  end for

  if compare(SQLquery[length(SQLquery)-5..length(SQLquery)],"WHERE ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-7]
  elsif compare(SQLquery[length(SQLquery)-3..length(SQLquery)],"AND ")=0 then
    SQLquery = SQLquery[1..length(SQLquery)-5]
  end if

  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  drop_cur = SQLcursor

  showDrop(1)
  guimode = MODE_BROWSE

end procedure

--------------------------------------------------------------------------------
-- INIT ROUTINES
--------------------------------------------------------------------------------

procedure MISdb_onOpen (integer self, integer event, sequence params)--params is ()
  object temp

  setFocus(AssetTab)
  guion = ON_ASSET
  guimode = MODE_NULL

  dbconn = openConnectionODBC("MISdb","misdb","misdb")
  if dbconn <= 0 then
    temp = message_box("ODBC Connection Error","Could not connect to DB",MB_ICONWARNING)
  end if
end procedure
setHandler( MISdb, w32HOpen, routine_id("MISdb_onOpen"))

--------------------------------------------------------------------------------
-- BUTTON CLICKING ROUTINES
--------------------------------------------------------------------------------

procedure SaveButton_onClick (integer self, integer event, sequence params)

  if guimode = MODE_NEW or guimode = MODE_BROWSE or guimode = MODE_NULL then
    if guimode = MODE_NULL then
      guimode = MODE_NEW
    end if
    if guion = ON_USER then
      saveUser()
    elsif guion = ON_ASSET then
      saveAsset()
    elsif guion = ON_LICENSE then
      saveLicense()
    elsif guion = ON_DROP then
      saveDrop()
    end if
  elsif guimode = MODE_SEARCH then
    if guion = ON_USER then
      setEnable(UserIDEdit,w32False)
      searchUser()
    elsif guion = ON_ASSET then
      setEnable(AssetID,w32False)
      setEnable(AssetUsername,w32False)
      setEnable(AssetDepartment,w32False)
      searchAsset()
    elsif guion = ON_LICENSE then
      setEnable(LicenseID,w32False)
      searchLicense()
    elsif guion = ON_DROP then
      searchDrop()
    end if
  end if

end procedure
setHandler( SaveButton, w32HClick, routine_id("SaveButton_onClick"))

--------------------------------------------------------------------------------

procedure FirstButton_onClick (integer self, integer event, sequence params)

  if guimode != MODE_BROWSE then
    return
  end if

  if guion = ON_USER then
    showUser(1)
  elsif guion = ON_ASSET then
    showAsset(1)
  elsif guion = ON_LICENSE then
    showLicense(1)
  elsif guion = ON_DROP then
    showDrop(1)
  end if

end procedure
setHandler( FirstButton, w32HClick, routine_id("FirstButton_onClick"))

--------------------------------------------------------------------------------

procedure PrevButton_onClick (integer self, integer event, sequence params)

  atom cptr
  object temp

  if guimode != MODE_BROWSE then
    return
  end if

  temp = getText(MISdb)
  cptr = find(' ',temp)
  while cptr > 0 do
    temp = temp[cptr+1..length(temp)]
    cptr = find(' ',temp)
  end while
  cptr = find('/',temp)
  if cptr > 0 then
    temp = temp[1..cptr-1]
  end if
  temp = value(temp)
  if temp[1] = GET_SUCCESS then
    cptr = temp[2]-1
  else
    cptr = 1
  end if
  if guion = ON_USER then
    if cptr < 1 then
      cptr = length(user_cur)
    end if
    showUser(cptr)
  elsif guion = ON_ASSET then
    if cptr < 1 then
      cptr = length(asset_cur)
    end if
    showAsset(cptr)
  elsif guion = ON_LICENSE then
    if cptr < 1 then
      cptr = length(license_cur)
    end if
    showLicense(cptr)
  elsif guion = ON_DROP then
    if cptr < 1 then
      cptr = length(drop_cur)
    end if
    showDrop(cptr)
  end if

end procedure
setHandler( PrevButton, w32HClick, routine_id("PrevButton_onClick"))

--------------------------------------------------------------------------------

procedure NextButton_onClick (integer self, integer event, sequence params)

  atom cptr
  object temp

  if guimode != MODE_BROWSE then
    return
  end if

  temp = getText(MISdb)
  cptr = find(' ',temp)
  while cptr > 0 do
    temp = temp[cptr+1..length(temp)]
    cptr = find(' ',temp)
  end while
  cptr = find('/',temp)
  if cptr > 0 then
    temp = temp[1..cptr-1]
  end if
  temp = value(temp)
  if temp[1] = GET_SUCCESS then
    cptr = temp[2]+1
  else
    cptr = 1
  end if
  if guion = ON_USER then
    if cptr > length(user_cur) then
      cptr = 1
    end if
    showUser(cptr)
  elsif guion = ON_ASSET then
    if cptr > length(asset_cur) then
      cptr = 1
    end if
    showAsset(cptr)
  elsif guion = ON_LICENSE then
    if cptr > length(license_cur) then
      cptr = 1
    end if
    showLicense(cptr)
  elsif guion = ON_DROP then
    if cptr > length(drop_cur) then
      cptr = 1
    end if
    showDrop(cptr)
  end if

end procedure
setHandler( NextButton, w32HClick, routine_id("NextButton_onClick"))

--------------------------------------------------------------------------------

procedure LastButton_onClick (integer self, integer event, sequence params)

  if guimode != MODE_BROWSE then
    return
  end if

  if guion = ON_USER then
    showUser(length(user_cur))
  elsif guion = ON_ASSET then
    showAsset(length(asset_cur))
  elsif guion = ON_LICENSE then
    showLicense(length(license_cur))
  elsif guion = ON_DROP then
    showDrop(length(drop_cur))
  end if

end procedure
setHandler( LastButton, w32HClick, routine_id("LastButton_onClick"))

--------------------------------------------------------------------------------

procedure NewButton_onClick (integer self, integer event, sequence params)

  atom cid, ync

  if guimode = MODE_NEW then
    ync = message_box("Would you like to save your changes?","Save changes",
        MB_YESNOCANCEL)
    if ync = IDCANCEL then
      return
    elsif ync = IDYES then
      SaveButton_onClick(self,event,params)
    end if
  end if

  guimode = MODE_NEW
  cid = getTabItem(TabControl30)
  if cid = UserTab then
    guion = ON_USER
    setText(MISdb,"MISdb - New User")
  elsif cid = AssetTab then
    guion = ON_ASSET
    setText(MISdb,"MISdb - New Asset")
  elsif cid = LicenseTab then
    guion = ON_LICENSE
    setText(MISdb,"MISdb - New License")
  elsif cid = DropTab then
    guion = ON_DROP
    setText(MISdb,"MISdb - New Drop")
  end if
  clearAll(TabControl30)

end procedure
setHandler( NewButton, w32HClick, routine_id("NewButton_onClick"))

--------------------------------------------------------------------------------

procedure FindButton_onClick (integer self, integer event, sequence params)

  atom ync, cid

  if guimode = MODE_NEW then
    ync = message_box("Would you like to save your changes?","Save changes",
        MB_YESNOCANCEL)
    if ync = IDCANCEL then
      return
    elsif ync = IDYES then
      SaveButton_onClick(self,event,params)
    end if
  elsif guimode = MODE_SEARCH then
    SaveButton_onClick(self,event,params)
    return
  end if

  guimode = MODE_SEARCH
  cid = getTabItem(TabControl30)
  if cid = UserTab then
    guion = ON_USER
    setText(MISdb,"MISdb - Search User")
    setEnable(UserIDEdit,w32True)
  elsif cid = AssetTab then
    guion = ON_ASSET
    setText(MISdb,"MISdb - Search Asset")
    setEnable(AssetID,w32True)
    setEnable(AssetUsername,w32True)
    setEnable(AssetDepartment,w32True)
  elsif cid = LicenseTab then
    guion = ON_LICENSE
    setText(MISdb,"MISdb - Search License")
    setEnable(LicenseID,w32True)
  elsif cid = DropTab then
    guion = ON_DROP
    setText(MISdb,"MISdb - Search Drop")
  end if
  clearAll(TabControl30)


end procedure
setHandler( FindButton, w32HClick, routine_id("FindButton_onClick"))

--------------------------------------------------------------------------------

procedure DeleteButton_onClick (integer self, integer event, sequence params)

  atom cptr, cid, yn
  object SQLquery, SQLhandle, SQLdata
  object temp

  if guimode!=MODE_BROWSE then
    return
  end if

  temp = getText(MISdb)
  cptr = find(' ',temp)
  while cptr > 0 do
    temp = temp[cptr+1..length(temp)]
    cptr = find(' ',temp)
  end while
  cptr = find('/',temp)
  if cptr > 0 then
    temp = temp[1..cptr-1]
  end if
  temp = value(temp)
  if temp[1] = GET_SUCCESS then
    cptr = temp[2]
  else
    return
  end if

  yn = message_box("Are you sure you want to delete this record?","Confirm delete",
     MB_YESNO)
  if yn = IDNO then
    return
  end if
  cid = getTabItem(TabControl30)

  if cid = UserTab then
    if cptr < 1 or cptr > length(user_cur) then
      return
    end if
    SQLquery = "DELETE FROM users WHERE pkey=\'"&sprintf("%d",user_cur[cptr][1])&"\'"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if

    user_cur = user_cur[1..cptr-1] & user_cur[cptr+1..length(user_cur)]
    if cptr > length(user_cur) then
      cptr = 1
    end if
    showUser(cptr)
    if length(user_cur)=0 then
      FindButton_onClick(self,event,params)
    end if
  elsif cid = AssetTab then
    if cptr < 1 or cptr > length(asset_cur) then
      return
    end if
    SQLquery = "DELETE FROM assets WHERE pkey=\'"&sprintf("%d",asset_cur[cptr][1])&"\'"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if

    asset_cur = asset_cur[1..cptr-1] & asset_cur[cptr+1..length(asset_cur)]
    if cptr > length(asset_cur) then
      cptr = 1
    end if
    showAsset(cptr)
    if length(asset_cur)=0 then
      FindButton_onClick(self,event,params)
    end if
  elsif cid = LicenseTab then
    if cptr < 1 or cptr > length(license_cur) then
      return
    end if
    SQLquery = "DELETE FROM licenses WHERE pkey=\'"&sprintf("%d",license_cur[cptr][1])&"\'"
    SQLhandle = prepareSQL(dbconn,SQLquery)
    if SQLhandle < 0 then
      odbcError(-SQLhandle)
      freeStmt(-SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if
    SQLdata = executeSQL(SQLhandle)
    if SQLdata < 0 then
      odbcError(-SQLdata)
      freeStmt(SQLhandle,SQL_RESET_PARAMS)
      FindButton_onClick(self,event,params)
      return
    end if

    license_cur = license_cur[1..cptr-1] & license_cur[cptr+1..length(license_cur)]
    if cptr > length(license_cur) then
      cptr = 1
    end if
    showLicense(cptr)
    if length(license_cur)=0 then
      FindButton_onClick(self,event,params)
    end if
  elsif cid = DropTab then

  end if


end procedure
setHandler( DeleteButton, w32HClick, routine_id("DeleteButton_onClick"))

--------------------------------------------------------------------------------

procedure ReportButton_onClick (integer self, integer event, sequence params)

end procedure
setHandler( ReportButton, w32HClick, routine_id("ReportButton_onClick"))

--------------------------------------------------------------------------------

procedure UndoButton_onClick (integer self, integer event, sequence params)

end procedure
setHandler( UndoButton, w32HClick, routine_id("UndoButton_onClick"))

--------------------------------------------------------------------------------
-- MULTIPLE ASSETS
--------------------------------------------------------------------------------

procedure onClick_MultipleAddButton (integer self, integer event, sequence params)

  sequence SNList, SNEdit
  SNList = getText(MultipleSNList)
  SNEdit = getText(MultipleSN1)

  if match(trim(SNEdit),SNList)=0 then
    if length(SNList)>0 then
      SNList = SNList & " | "
    end if
    SNList = SNList & trim(SNEdit)
    setText(MultipleSNList,SNList)
  end if
  setFocus(MultipleSN1)

end procedure
setHandler( MultipleAddButton, w32HClick, routine_id("onClick_MultipleAddButton"))

--------------------------------------------------------------------------------

procedure onClick_MultipleClearButton (integer self, integer event, sequence params)
  setText(MultipleSNList,"")
end procedure
setHandler( MultipleClearButton, w32HClick, routine_id("onClick_MultipleClearButton"))

--------------------------------------------------------------------------------

procedure onClick_MultipleSaveButton (integer self, integer event, sequence params)

  atom pos
  sequence SNList, SNSplit
  SNList = getText(MultipleSNList)
  SNSplit = {}

  while length(SNList) > 0 do
    pos = match(" | ",SNList)
    if pos = 0 then
      SNSplit = append(SNSplit,SNList)
      SNList = {}
    else
      SNSplit = append(SNSplit,SNList[1..pos-1])
      SNList = SNList[pos+3..length(SNList)]
    end if
  end while

  for ctr = 1 to length(SNSplit) do
    guimode = MODE_NEW
    guion = ON_ASSET
    setText(AssetID,"")
    setText(AssetSN,SNSplit[ctr])
    saveAsset()
  end for

  setText(MultipleSNList,"")
  setText(MultipleSN1,"")
  closeWindow(MultipleWin)

end procedure
setHandler( MultipleSaveButton, w32HClick, routine_id("onClick_MultipleSaveButton"))

--------------------------------------------------------------------------------

procedure onClick_MultipleCancelButton (integer self, integer event, sequence params)
  closeWindow(MultipleWin)
end procedure
setHandler( MultipleCancelButton, w32HClick, routine_id("onClick_MultipleCancelButton"))

--------------------------------------------------------------------------------

procedure onClick_MultipleButton (integer self, integer event, sequence params)
  openWindow(MultipleWin,Modal)
end procedure
setHandler( AssetMultipleButton, w32HClick, routine_id("onClick_MultipleButton"))

--------------------------------------------------------------------------------
-- Menus
--------------------------------------------------------------------------------

procedure onMenu_FilePrintSetup (integer self, integer event, sequence params)

end procedure
setHandler(FilePrintSetup,w32HClick,routine_id("onMenu_FilePrintSetup"))

--------------------------------------------------------------------------------

procedure onMenu_FileExit (integer self, integer event, sequence params)
  closeWindow(MISdb)
end procedure
setHandler(FileExit,w32HClick,routine_id("onMenu_FileExit"))

--------------------------------------------------------------------------------

procedure onMenu_TableUser (integer self, integer event, sequence params)
  setFocus(UserTab)
  setCheck(TableUser,w32True)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32False)
end procedure
setHandler(TableUser,w32HClick,routine_id("onMenu_TableUser"))

--------------------------------------------------------------------------------

procedure onMenu_TableAsset (integer self, integer event, sequence params)
  setFocus(AssetTab)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32True)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32False)
end procedure
setHandler(TableAsset,w32HClick,routine_id("onMenu_TableAsset"))

--------------------------------------------------------------------------------

procedure onMenu_TableLicense (integer self, integer event, sequence params)
  setFocus(LicenseTab)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32True)
  setCheck(TableDrop,w32False)
end procedure
setHandler(TableLicense,w32HClick,routine_id("onMenu_TableLicense"))

--------------------------------------------------------------------------------

procedure onMenu_TableDrop (integer self, integer event, sequence params)
  setFocus(DropTab)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32True)
end procedure
setHandler(TableDrop,w32HClick,routine_id("onMenu_TableDrop"))

--------------------------------------------------------------------------------

procedure onMenu_ActionNew (integer self, integer event, sequence params)
  object junk
  junk = invokeHandler(NewButton,w32HClick,"p")
end procedure
setHandler(ActionNew,w32HClick,routine_id("onMenu_ActionNew"))

--------------------------------------------------------------------------------

procedure onMenu_ActionSearch (integer self, integer event, sequence params)
  object junk
  junk = invokeHandler(FindButton,w32HClick,"p")
end procedure
setHandler(ActionSearch,w32HClick,routine_id("onMenu_ActionSearch"))

--------------------------------------------------------------------------------

procedure onMenu_HelpAbout (integer self, integer event, sequence params)
  object junk
  junk = message_box("Notations user and asset database application.\n"&
                     "version 0.05\n"&
                     "written by Michael J. Sabal\n",
                     "MISdb About",
                     MB_OK)
end procedure
setHandler(HelpAbout,w32HClick,routine_id("onMenu_HelpAbout"))

--------------------------------------------------------------------------------
-- Focus events
--------------------------------------------------------------------------------

procedure onFocus_UserTab (integer self, integer event, sequence params)
  setCheck(TableUser,w32True)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32False)
end procedure
setHandler(UserTab,w32HClick,routine_id("onFocus_UserTab"))

--------------------------------------------------------------------------------

procedure onFocus_AssetTab (integer self, integer event, sequence params)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32True)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32False)
end procedure
setHandler(AssetTab,w32HClick,routine_id("onFocus_AssetTab"))

--------------------------------------------------------------------------------

procedure onFocus_LicenseTab (integer self, integer event, sequence params)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32True)
  setCheck(TableDrop,w32False)
end procedure
setHandler(LicenseTab,w32HClick,routine_id("onFocus_LicenseTab"))

--------------------------------------------------------------------------------

procedure onFocus_DropTab (integer self, integer event, sequence params)
  setCheck(TableUser,w32False)
  setCheck(TableAsset,w32False)
  setCheck(TableLicense,w32False)
  setCheck(TableDrop,w32True)
end procedure
setHandler(DropTab,w32HClick,routine_id("onFocus_DropTab"))

--------------------------------------------------------------------------------

procedure onNoFocus_AssetUserID (integer self, integer event, sequence params)

  sequence SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor
  sequence userID

  userID = getText(AssetUserID)

  SQLquery = "SELECT * FROM users WHERE pkey=\'"&userID&"\'"
  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  if length(SQLcursor)>0 then
    setText(AssetUsername,SQLcursor[1][2]&" "&SQLcursor[1][3])
    setText(AssetDepartment,SQLcursor[1][7])
  end if

end procedure
setHandler(AssetUserID,w32HLostFocus,routine_id("onNoFocus_AssetUserID"))

--------------------------------------------------------------------------------

procedure onNoFocus_LicenseAssetID (integer self, integer event, sequence params)

  sequence SQLquery
  atom SQLhandle
  object SQLdata, SQLcursor
  sequence assetID

  assetID = trim(getText(LicenseAsset))

  SQLquery = "SELECT * FROM assets WHERE pkey=\'"&assetID&"\'"
  SQLhandle = prepareSQL(dbconn,SQLquery)
  if SQLhandle < 0 then
    odbcError(-SQLhandle)
    freeStmt(-SQLhandle,SQL_RESET_PARAMS)
    return
  end if
  SQLdata = executeSQL(SQLhandle)
  if SQLdata < 0 then
    odbcError(-SQLdata)
    freeStmt(SQLhandle,SQL_RESET_PARAMS)
    return
  end if

  SQLcursor = {}
  SQLdata = odbc:getData(SQLhandle)
  while sequence(SQLdata) and length(SQLdata) > 0 do
    SQLcursor = SQLcursor & SQLdata
    SQLdata = odbc:getData(SQLhandle)
  end while
  freeStmt(SQLhandle,SQL_RESET_PARAMS)
  if length(SQLcursor)>0 then
    setText(LicenseAssetDescrip,
            trim(SQLcursor[1][4])&
            " "&trim(SQLcursor[1][5])&
            " "&trim(SQLcursor[1][3])&
            " "&trim(SQLcursor[1][6]))
  end if

end procedure
setHandler(LicenseAsset,w32HLostFocus,routine_id("onNoFocus_LicenseAssetID"))

--------------------------------------------------------------------------------
-- MAIN()
--------------------------------------------------------------------------------

initODBC()
WinMain( MISdb,Normal )
cleanUpODBC()
